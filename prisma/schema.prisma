generator client {
  provider   = "prisma-client-js"
  engineType = "client"
  output     = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid()) @map("id")
  role          Role      @default(USER) @map("role")
  name          String?   @map("name")
  email         String    @unique @map("email")
  emailVerified DateTime? @map("email_verified_at")
  username      String?   @unique @map("username")
  password      String?   @map("password")
  image         String?   @map("image_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts              Account[]
  emailVerificationCode EmailVerificationCode[]
  forgotPasswordCode    ForgotPasswordCode[]
  userSectionVisibility UserSectionVisibility[]
  tracks                Track[]
  notes                 TrackNote[]
  trackViews            TrackView[]
  userFavoriteTracks    UserFavoriteTrack[]

  @@map("users")
}

model UserFavoriteTrack {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  trackId   String   @map("track_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("user_favorite_tracks")
}

enum UserSectionVisibilityValue {
  PUBLIC
  ME_ONLY
}

model UserSectionVisibility {
  id        String                     @id @default(cuid()) @map("id")
  userId    String                     @map("user_id")
  key       String                     @map("key")
  value     UserSectionVisibilityValue @map("value")
  createdAt DateTime                   @default(now()) @map("created_at")
  updatedAt DateTime                   @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_section_visibilities")
}

model Account {
  userId            String  @map("user_id")
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model EmailVerificationCode {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  code      String   @map("code")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_codes")
}

model ForgotPasswordCode {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  code      String   @map("code")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forgot_password_codes")
}

enum TrackStatus {
  QUEUED
  DOWNLOADING_THUMBNAILS
  DOWNLOADING_VIDEO
  EXTRACTING_LYRICS
  EXTRACTING_VOCALS
  DETECTING_VOCALS_NOTES
  ERROR
  COMPLETED
}

enum PlayingCopyright {
  NOT_ALLOWED
  ALLOWED
  ALLOW_PLAY_AND_TRANSPOSE
  ADMIN_ONLY
}

model Track {
  id                String           @id @default(cuid()) @map("id")
  ytId              String           @map("yt_id")
  jobId             String?          @map("job_id")
  status            TrackStatus      @default(QUEUED) @map("status")
  playingCopyright  PlayingCopyright @default(NOT_ALLOWED) @map("playing_copyright")
  musicUrl          String?          @map("music_url")
  musicMp3Url       String?          @map("music_mp3_url")
  vocalsUrl         String?          @map("vocals_url")
  vocalsMp3Url      String?          @map("vocals_mp3_url")
  lyricsUrl         String?          @map("lyrics_url")
  statusDescription String?          @map("status_description")
  title             String?          @map("title")
  duration          String?          @map("duration")
  year              Int?             @map("year")
  durationSeconds   Int?             @map("duration_seconds")
  isExplicit        Boolean?         @map("is_explicit")
  albumId           String?          @map("album_id")
  score             Int              @default(0) @map("score")
  creatorId         String           @map("creator_id")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  creator              User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  album                Album?                @relation(fields: [albumId], references: [id], onDelete: Cascade)
  thumbnails           Thumbnail[]
  trackArtists         TrackArtist[]
  notes                TrackNote[]
  views                TrackView[]
  userFavoriteTracks   UserFavoriteTrack[]
  trackCalculationJobs TrackCalculationJob[]

  @@map("tracks")
}

model TrackCalculationJob {
  id        String    @id @default(cuid()) @map("id")
  trackId   String    @map("track_id")
  jobId     String    @map("job_id")
  startAt   DateTime  @map("start_at")
  endAt     DateTime? @map("end_at")
  score     Int?      @map("score")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("track_calculation_jobs")
}

model TrackView {
  id        String   @id @default(cuid()) @map("id")
  trackId   String   @map("track_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("track_views")
}

model Album {
  id        String   @id @default(cuid()) @map("id")
  name      String   @map("name")
  ytId      String   @map("yt_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tracks Track[]

  @@map("albums")
}

model Thumbnail {
  id        String   @id @default(cuid()) @map("id")
  trackId   String   @map("track_id")
  url       String   @map("url")
  width     Int?     @map("width")
  height    Int?     @map("height")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("thumbnails")
}

model TrackArtist {
  id        String   @id @default(cuid()) @map("id")
  artistId  String   @map("artist_id")
  trackId   String   @map("track_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  track  Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("track_artists")
}

model Artist {
  id        String   @id @default(cuid()) @map("id")
  name      String   @map("name")
  ytId      String   @map("yt_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  trackArtists TrackArtist[]

  @@map("artists")
}

model TrackNote {
  id            String   @id @default(cuid()) @map("id")
  trackId       String   @map("track_id")
  note          String   @map("note")
  octave        Int      @map("octave")
  start         Float    @map("start")
  end           Float    @map("end")
  frequencyMean Float    @map("frequency_mean")
  creatorId     String?  @map("creator_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  track   Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  creator User? @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("track_notes")
}
